From 8f4ebbfca23b4366466c2fc5037cc3665dacf7d1 Mon Sep 17 00:00:00 2001
From: Alexey Andriyanov <alan@al-an.info>
Date: Sat, 20 Jun 2015 21:51:08 +0300
Subject: [PATCH 12/17] ipvs: rs weight changes properly on reload

Do not remove and re-add a real_server when reloading config
if its weight has changed. Just edit the existing ipvs rs entry.
---
 keepalived/check/check_misc.c   |  3 ++-
 keepalived/check/check_snmp.c   |  2 +-
 keepalived/check/ipwrapper.c    | 15 +++++++++++----
 keepalived/include/check_data.h |  5 +++--
 keepalived/include/ipwrapper.h  |  2 +-
 5 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/keepalived/check/check_misc.c b/keepalived/check/check_misc.c
index 53e08e9..9eff880 100644
--- a/keepalived/check/check_misc.c
+++ b/keepalived/check/check_misc.c
@@ -220,7 +220,8 @@ misc_check_child_thread(thread_t * thread)
 			 * Catch legacy case of status being 0 but misc_dynamic being set.
 			 */
 			if (misck_checker->dynamic == 1 && status != 0)
-				update_svr_wgt(status - 2, checker->vs, checker->rs);
+				update_svr_wgt(status - 2, checker->vs,
+					       checker->rs, 1);
 
 			/* everything is good */
 			if (!svr_checker_up(checker->id, checker->rs)) {
diff --git a/keepalived/check/check_snmp.c b/keepalived/check/check_snmp.c
index 96e2d9b..0d4098e 100644
--- a/keepalived/check/check_snmp.c
+++ b/keepalived/check/check_snmp.c
@@ -476,7 +476,7 @@ check_snmp_realserver_weight(int action,
 		if (action == RESERVE2)
 			break;
 		/* Commit: change values. There is no way to fail. */
-		update_svr_wgt((long)(*var_val), vs, rs);
+		update_svr_wgt((long)(*var_val), vs, rs, 1);
 		break;
 	}
 	return SNMP_ERR_NOERROR;
diff --git a/keepalived/check/ipwrapper.c b/keepalived/check/ipwrapper.c
index 979d914..14eea78 100644
--- a/keepalived/check/ipwrapper.c
+++ b/keepalived/check/ipwrapper.c
@@ -155,9 +155,13 @@ init_service_rs(virtual_server_t * vs)
 
 	for (e = LIST_HEAD(vs->rs); e; ELEMENT_NEXT(e)) {
 		rs = ELEMENT_DATA(e);
-		/* Do not re-add failed RS instantly on reload */
-		if (rs->reloaded)
+
+		if (rs->reloaded) {
+			if (rs->iweight != rs->pweight)
+				update_svr_wgt(rs->iweight, vs, rs, 0);
+			/* Do not re-add failed RS instantly on reload */
 			continue;
+		}
 		/* In alpha mode, be pessimistic (or realistic?) and don't
 		 * add real servers into the VS pool. They will get there
 		 * later upon healthchecks recovery (if ever).
@@ -420,7 +424,8 @@ perform_svr_state(int alive, virtual_server_t * vs, real_server_t * rs)
 
 /* Store new weight in real_server struct and then update kernel. */
 void
-update_svr_wgt(int weight, virtual_server_t * vs, real_server_t * rs)
+update_svr_wgt(int weight, virtual_server_t * vs, real_server_t * rs
+		, int update_quorum)
 {
 	if (weight != rs->weight) {
 		log_message(LOG_INFO, "Changing weight from %d to %d for %s service %s of VS %s"
@@ -439,7 +444,8 @@ update_svr_wgt(int weight, virtual_server_t * vs, real_server_t * rs)
 		if (rs->set && ISALIVE(rs) &&
 		    (vs->quorum_state == UP || !vs->s_svr || !ISALIVE(vs->s_svr)))
 			ipvs_cmd(LVS_CMD_EDIT_DEST, vs, rs);
-		update_quorum_state(vs);
+		if (update_quorum)
+			update_quorum_state(vs);
 	}
 }
 
@@ -647,6 +653,7 @@ clear_diff_rs(virtual_server_t * old_vs, list new_rs_list)
 			new_rs->alive = rs->alive;
 			new_rs->set = rs->set;
 			new_rs->weight = rs->weight;
+			new_rs->pweight = rs->iweight;
 			new_rs->reloaded = 1;
 			if (new_rs->alive) {
 				/* clear failed_checkers list */
diff --git a/keepalived/include/check_data.h b/keepalived/include/check_data.h
index c795f67..4a6d49f 100644
--- a/keepalived/include/check_data.h
+++ b/keepalived/include/check_data.h
@@ -71,6 +71,8 @@ typedef struct _real_server {
 	struct sockaddr_storage		addr;
 	int				weight;
 	int				iweight;	/* Initial weight */
+	int 				pweight;	/* previous weight
+							 * used for reloading */
 #ifdef _KRNL_2_6_
 	uint32_t			u_threshold;   /* Upper connection limit. */
 	uint32_t			l_threshold;   /* Lower connection limit. */
@@ -234,8 +236,7 @@ static inline int inaddr_equal(sa_family_t family, void *addr1, void *addr2)
 			 (X)->range     == (Y)->range &&		\
 			 (X)->vfwmark   == (Y)->vfwmark)
 
-#define RS_ISEQ(X,Y)	(sockstorage_equal(&(X)->addr,&(Y)->addr) &&	\
-			 (X)->iweight   == (Y)->iweight)
+#define RS_ISEQ(X,Y)	(sockstorage_equal(&(X)->addr,&(Y)->addr))
 
 /* Global vars exported */
 extern check_data_t *check_data;
diff --git a/keepalived/include/ipwrapper.h b/keepalived/include/ipwrapper.h
index 0d3e77a..f105e2f 100644
--- a/keepalived/include/ipwrapper.h
+++ b/keepalived/include/ipwrapper.h
@@ -50,7 +50,7 @@
 
 /* prototypes */
 extern int perform_svr_state(int, virtual_server_t *, real_server_t *);
-extern void update_svr_wgt(int, virtual_server_t *, real_server_t *);
+extern void update_svr_wgt(int, virtual_server_t *, real_server_t *, int);
 extern int svr_checker_up(checker_id_t, real_server_t *);
 extern void update_svr_checker_state(int, checker_id_t, virtual_server_t *, real_server_t *);
 extern int init_services(void);
-- 
2.4.6

